(1)
Team members:
Yibing Zhang 
Yujia Liu

(2)
We are going to build a Music Platform Management System Database. Nowadays,people use different platforms to listen to music. For example, iTunes, Spotify, Deezer and so on. Our mission is to collect data in one platform and use them to analyse users' behaviors and hobbies.

(3)
1.How many users have listened to 'Sugar' by Maroon5?
2.What kind of song do people like to listen to most between 9:00PM to 3:00AM?
3.What is user Yibing's favorite songs?
4.Recommed some songs similar to what Yujia likes.
5.Which edition of 'Shape of You' is most popular?
6.Which song list has the highest percentage of favorites to 'listened'?
7.Help Yujia find new songs based on her appetite.
8.What is the most popular song on 11-13-2017?
9.Which city has the largest number of users?
10.List the singer with the largest amount of released albums in NetEaseMusic Platform.
11.List the number of users who downloaded all the songs in Taylor Swift's new album 'reputation'.
12.What is the percentage of iOS NetEaseMusic users in city Nanjing?
13.How many song lists include 'Yellow'?
14.Which city has the least number of users with membership?
15.What is the most popular music genre in Shanghai?
16.What is the song with the most comments in genre 'country'?
17.List the song that Yibing listened to most frequently in the past week.
18.List the most popular song list in genre 'Japanese'.
19.How many albums of Maroon5 does NetEaseMusic have?
20.Who writes songs for Jay Chou most frequently?

(4)
CREATE DATABASE NetEaseMusic;

CREATE TABLE Platform (
       PlatformName  VARCHAR(20) NOT NULL,
       NumberofUsers INTEGER NOT NULL,
       NumberofMusicians INTEGER NOT NULL,
       FoundedDate VARCHAR(20) NOT NULL,
       NumberofSongs INTEGER NOT NULL,
       NumberofPopularLists INTEGER NOT NULL,
       PRIMARY KEY (PlatformName)
);

CREATE TABLE Users(
	   UserName VARCHAR(20) NOT NULL, 
	   UserID VARCHAR(20) NOT NULL,
	   TierRanking VARCHAR(20) NOT NULL,
	   PRIMARY KEY (UserID)
);

CREATE TABLE UseDeviceCategory(
	   UserID VARCHAR(20) NOT NULL,
	   DeviceCategory VARCHAR(20) NOT NULL,
	   FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE Listento(
       UserID VARCHAR(20) NOT NULL,
       SongID VARCHAR(20) NOT NULL,
       Time   VARCHAR(20),
       FOREIGN KEY (UserID) REFERENCES Users(UserID),
       FOREIGN KEY (SongID) REFERENCES Song(SongID)
);

CREATE TABLE Song(
       SongName VARCHAR(20) NOT NULL,
       SongID   VARCHAR(20) NOT NULL,
       AlbumID    VARCHAR(20)
       ReleasedTime VARCHAR(20),
       Genre VARCHAR(20),
       SingerID VARCHAR(20),
       SongWritterID VARCHAR(20),
       ProducerID VARCHAR(20),
       PRIMARY KEY (SongID),
       FOREIGN KEY (SingerID) REFERENCES Musician(ID),
       FOREIGN KEY (SongWritterID) REFERENCES Musician(ID),
       FOREIGN KEY (ProducerID) REFERENCES Musician(ID)
       FOREIGN KEY (AlbumID) REFERENCES Album(ID)
);

CREATE TABLE Comments(
       ID   VARCHAR(20) NOT NULL,
       SongID   VARCHAR(20) NOT NULL,
       UserID   VARCHAR(20) NOT NULL,
       CreateTime VARCHAR(20),
       Content  VARCHAR(20),
       PRIMARY KEY (ID),
       FOREIGN KEY (SongID) REFERENCES Song(SongID),
       FOREIGN KEY (UserID) REFERENCES Users(UserID)
};


CREATE TABLE Album(
       Name VARCHAR(20) NOT NULL,
       ID   VARCHAR(20) NOT NULL,
       SingerID VARCHAR(20),
       Category VARCHAR(20),
       PRIMARY KEY (ID),
       FOREIGN KEY (SingerID) REFERENCES Musician(ID)
};

CREATE TABLE Musician(
       Name VARCHAR(20) NOT NULL,
       ID   VARCHAR(20) NOT NULL,
       Category VARCHAR(20),
       PRIMARY KEY (ID)
); 

CREATE TABLE MadeTheSong(
       MusicianID VARCHAR(20) OT NULL,
       SongID VARCHAR(20) NOT NULL,
       Time VARCHAR(20),
       Duty VARCHAR(20),
       FOREIGN KEY (MusicianID) REFERENCES Musician(ID),
       FOREIGN KEY (SongID) REFERENCES Song(SongID)
);

CREATE TABLE SongList(
       ListName VARCHAR(20) NOT NULL,
       ListID VARCHAR(20) NOT NULL,
       CreationDate VARCHAR(20),
       PRIMARY KEY (ListID)
);

CREATE TABLE HasList(
       UserID VARCHAR(20) NOT NULL,
       ListID VARCHAR(20) NOT NULL,
       FOREIGN KEY (UserID) REFERENCES Users(UserID),
       FOREIGN KEY (ListID) REFERENCES SongList(ListID)
);

CREATE TABLE IncludeSong(
       ListID VARCHAR(20) NOT NULL,
       SongID VARCHAR(20),
       FOREIGN KEY (ListID) REFERENCES SongList(ListID),
       FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE UserLivesIn(
       PersonID VARCHAR(20),
       CityID VARCHAR(20),
       FOREIGN KEY (UserID) REFERENCES Users(UserID),
       FOREIGN KEY (CityID) REFERENCES City(CityID)
);

CREATE TABLE City(
       CityName VARCHAR(20),
       CityID VARCHAR(20),
       Country VARCHAR(20),
       PRIMARY KEY (CityID)
);

CREATE TABLE Likes(
	   UserID VARCHAR(20) NOT NULL,
	   SongID VARCHAR(20) NOT NULL,
	   FOREIGN KEY (UserID) REFERENCES Users(UserID),
	   FOREIGN KEY (SongID) REFERENCES Song(SongID)
);

(5)
SQL queries samples

1.How many users have listened to 'Sugar' by Maroon5?
SELECT COUNT(c.UserID) FROM (SELECT DISTINCT u.UserID AS UserID FROM Users AS u, Listento AS l,Song AS s,Musician AS m WHERE u.UserID=l.UserID AND l.SongID=s.SongID AND
s.SongName='Sugar' AND s.SingerID=m.ID AND m.Name='Maroon5') AS c;

2.What kind of song do people like to listen to most between 21:00 to 03:00?
SELECT most.topgenre FROM (SELECT s.Genre AS topgenre, COUNT(l.UserID) AS cnt FROM Song AS s, Listento AS l WHERE s.SongID=l.SongID AND (l.Time>='21:00' OR l.Time<='03:00') GROUP BY s.Genre  ORDER BY cnt DESC LIMIT 1) AS most;

3.Which city has the largest number of users?
SELECT CityName FROM City AS c, UserLivesIn AS l WHERE c.CityID = l.CityID AND l.CityID IN (SELECT CityID FROM UserLivesIn GROUP BY CityID ORDER BY COUNT(PersonID) DESC LIMIT 1);

4.What is the song with the most comments in genre 'country'?
SELECT SongName FROM Song AS s, Comments AS c WHERE c.SongID = s.SongID AND s.Genre = ‘country’ AND s.SongID IN (SELECT SongID FROM Comments GROUP BY Comments.SongID ORDER BY COUNT(Comments.ID) DESC LIMIT 1);

5.How many albums of Maroon5 does NetEaseMusic have?
SELECT COUNT(a.ID) FROM Album AS a, Musician AS m WHERE a.SingerID = m.ID AND m.Name = ‘Maroon5’;



(6)
According to piazza, if we focus more on data extraction,then we could spend less time on other aspect.
Data input method:
Python Web Crawler?           ...zhuanlan.zhihu.com/p/24040727...
Perl based Data Extraction?   ...Google...


(7)Output
For each query, we will output a result table on GUI or Web Interface.

(8)Advanced Topics:
Primary: Data Mining
Complex data extraction issues from online data sources
Minor:GUI???  